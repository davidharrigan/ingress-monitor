// MIT License
//
// Copyright (c) 2018 Jelmer Snoeck
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	time "time"

	ingressmonitorv1alpha1 "github.com/jelmersnoeck/ingress-monitor/apis/ingressmonitor/v1alpha1"
	versioned "github.com/jelmersnoeck/ingress-monitor/pkg/client/generated/clientset/versioned"
	internalinterfaces "github.com/jelmersnoeck/ingress-monitor/pkg/client/generated/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/jelmersnoeck/ingress-monitor/pkg/client/generated/listers/ingressmonitor/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// MonitorTemplateInformer provides access to a shared informer and lister for
// MonitorTemplates.
type MonitorTemplateInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.MonitorTemplateLister
}

type monitorTemplateInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewMonitorTemplateInformer constructs a new informer for MonitorTemplate type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewMonitorTemplateInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredMonitorTemplateInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredMonitorTemplateInformer constructs a new informer for MonitorTemplate type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredMonitorTemplateInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.IngressmonitorV1alpha1().MonitorTemplates().List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.IngressmonitorV1alpha1().MonitorTemplates().Watch(options)
			},
		},
		&ingressmonitorv1alpha1.MonitorTemplate{},
		resyncPeriod,
		indexers,
	)
}

func (f *monitorTemplateInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredMonitorTemplateInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *monitorTemplateInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&ingressmonitorv1alpha1.MonitorTemplate{}, f.defaultInformer)
}

func (f *monitorTemplateInformer) Lister() v1alpha1.MonitorTemplateLister {
	return v1alpha1.NewMonitorTemplateLister(f.Informer().GetIndexer())
}
